version: "3.9"

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
  database:
    driver: bridge


services:
  auth-db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - database

  auth-service:
    build:
      context: ./auth-service
    depends_on:
      auth-db:
        condition: service_started
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    networks:
      - backend
      - database

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - document-generator
      - template-service
      - storage-service
    networks:
      - backend



  document-generator:
    build:
      context: ./document-generator
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - backend

  template-service:
    build:
      context: ./template-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    networks:
      - backend

  storage-service:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    networks:
      - backend

